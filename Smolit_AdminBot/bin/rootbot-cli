#!/usr/bin/env python3

import os
import sys
import argparse
import json
from root_bot import RootBot

def execute_command(bot, command):
    """Execute a system command and return the result"""
    success, output = bot.execute_command(command)
    return {"success": success, "output": output}

def query_memory(bot, entry_type=None):
    """Query bot's memory for specific event types"""
    results = bot.query_memory(entry_type=entry_type)
    return results

def monitor_system(bot):
    """Get current system metrics"""
    return bot.monitor_system()

def main():
    parser = argparse.ArgumentParser(description="RootBot CLI Interface")
    subparsers = parser.add_subparsers(dest='command', help='Command to execute')

    # Execute command
    exec_parser = subparsers.add_parser('exec', help='Execute a system command')
    exec_parser.add_argument('cmd', help='Command to execute')

    # Query memory
    query_parser = subparsers.add_parser('query', help='Query bot memory')
    query_parser.add_argument('--type', help='Event type to query')

    # Monitor system
    subparsers.add_parser('monitor', help='Show system metrics')

    args = parser.parse_args()

    try:
        bot = RootBot()
        
        if args.command == 'exec':
            result = execute_command(bot, args.cmd)
            print(json.dumps(result, indent=2))
        
        elif args.command == 'query':
            results = query_memory(bot, args.type)
            print(json.dumps(results, indent=2))
        
        elif args.command == 'monitor':
            metrics = monitor_system(bot)
            print(json.dumps(metrics, indent=2))
        
        else:
            parser.print_help()

    except Exception as e:
        print(f"Error: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
