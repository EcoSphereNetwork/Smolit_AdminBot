#!/usr/bin/env python3

import os
import sys
import json
import argparse
from root_bot.docker_manager import DockerManager

def format_output(data):
    """Format output as JSON"""
    return json.dumps(data, indent=2)

def check_docker_available(docker_manager):
    """Check if Docker daemon is available"""
    if not docker_manager.is_available():
        print(format_output({
            "error": "Docker daemon is not available. Please ensure Docker is running and you have the necessary permissions."
        }), file=sys.stderr)
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="RootBot Docker Management CLI")
    subparsers = parser.add_subparsers(dest='command', help='Command to execute')

    # List containers
    list_parser = subparsers.add_parser('ls', help='List containers')
    list_parser.add_argument('--all', '-a', action='store_true', help='Show all containers')

    # Container stats
    stats_parser = subparsers.add_parser('stats', help='Show container stats')
    stats_parser.add_argument('container_id', help='Container ID or name')

    # Container operations
    start_parser = subparsers.add_parser('start', help='Start container')
    start_parser.add_argument('container_id', help='Container ID or name')

    stop_parser = subparsers.add_parser('stop', help='Stop container')
    stop_parser.add_argument('container_id', help='Container ID or name')
    stop_parser.add_argument('--timeout', '-t', type=int, default=10, help='Timeout in seconds')

    rm_parser = subparsers.add_parser('rm', help='Remove container')
    rm_parser.add_argument('container_id', help='Container ID or name')
    rm_parser.add_argument('--force', '-f', action='store_true', help='Force removal')

    # Image operations
    images_parser = subparsers.add_parser('images', help='List images')

    pull_parser = subparsers.add_parser('pull', help='Pull image')
    pull_parser.add_argument('image_name', help='Image name to pull')

    rmi_parser = subparsers.add_parser('rmi', help='Remove image')
    rmi_parser.add_argument('image_id', help='Image ID or name')
    rmi_parser.add_argument('--force', '-f', action='store_true', help='Force removal')

    # Docker info
    subparsers.add_parser('info', help='Show Docker daemon info')

    args = parser.parse_args()

    try:
        docker_manager = DockerManager()
        check_docker_available(docker_manager)

        if args.command == 'ls':
            result = docker_manager.get_containers(all=args.all)
            print(format_output(result))

        elif args.command == 'stats':
            result = docker_manager.get_container_stats(args.container_id)
            print(format_output(result))

        elif args.command == 'start':
            success, msg = docker_manager.start_container(args.container_id)
            print(format_output({"success": success, "message": msg}))

        elif args.command == 'stop':
            success, msg = docker_manager.stop_container(args.container_id, timeout=args.timeout)
            print(format_output({"success": success, "message": msg}))

        elif args.command == 'rm':
            success, msg = docker_manager.remove_container(args.container_id, force=args.force)
            print(format_output({"success": success, "message": msg}))

        elif args.command == 'images':
            result = docker_manager.get_images()
            print(format_output(result))

        elif args.command == 'pull':
            success, msg = docker_manager.pull_image(args.image_name)
            print(format_output({"success": success, "message": msg}))

        elif args.command == 'rmi':
            success, msg = docker_manager.remove_image(args.image_id, force=args.force)
            print(format_output({"success": success, "message": msg}))

        elif args.command == 'info':
            result = docker_manager.get_docker_info()
            print(format_output(result))

        else:
            parser.print_help()
            sys.exit(1)

    except ConnectionError as e:
        print(format_output({"error": str(e)}), file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(format_output({"error": str(e)}), file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()

