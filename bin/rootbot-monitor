#!/usr/bin/env python3

import os
import sys
import json
import time
import psutil
from datetime import datetime

def monitor_system():
    """Get comprehensive system metrics"""
    try:
        metrics = {
            'cpu_percent': psutil.cpu_percent(interval=1),
            'memory_percent': psutil.virtual_memory().percent,
            'disk_usage': psutil.disk_usage('/').percent,
            'network_connections': len(psutil.net_connections()),
            'load_average': os.getloadavg(),
            'timestamp': datetime.now().isoformat()
        }
        
        # Add memory details
        mem = psutil.virtual_memory()
        metrics['memory_details'] = {
            'total': mem.total,
            'available': mem.available,
            'used': mem.used,
            'free': mem.free,
            'cached': mem.cached if hasattr(mem, 'cached') else None
        }
        
        # Add system uptime
        metrics['uptime'] = time.time() - psutil.boot_time()
        
        return metrics
            
    except Exception as e:
        print(f"Error: {str(e)}", file=sys.stderr)
        return None

def main():
    try:
        metrics = monitor_system()
        if metrics:
            print(json.dumps(metrics, indent=2))
        else:
            sys.exit(1)
    except Exception as e:
        print(f"Error: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()

